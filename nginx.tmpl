# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  ''      '';
}

server {
  server_name "~^www\.(.*)$" ;
  return 301 $scheme://$1$request_uri ;
}

server {
  listen 80 default_server;
  server_name _; # This is just an invalid value which will never trigger on a real hostname.
  error_log /proc/self/fd/2;
  access_log /proc/self/fd/1;
  return 503;
}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
upstream {{ $host }} {

{{ range $index, $value := $containers }}

  {{ $addrLen := len $value.Addresses }}
  {{/* If only 1 port exposed, use that */}}
  {{ if eq $addrLen 1 }}
    {{ with $address := index $value.Addresses 0 }}
       # {{$value.Name}}
       server {{ $address.IP }}:{{ $address.Port }};
    {{ end }}

  {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
  {{ else if $value.Env.VIRTUAL_PORT }}
    {{ range $i, $address := $value.Addresses }}
       {{ if eq $address.Port $value.Env.VIRTUAL_PORT }}
       # {{$value.Name}}
       server {{ $address.IP }}:{{ $address.Port }};
       {{ end }}
    {{ end }}

  {{/* Else default to standard web port 80 */}}
  {{ else }}
    {{ range $i, $address := $value.Addresses }}
      {{ if eq $address.Port "80" }}
      # {{$value.Name}}
      server {{ $address.IP }}:{{ $address.Port }};
      {{ end }}
    {{ end }}
  {{ end }}
{{ end }}
}

server {

  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

  listen 80;
  server_name {{ $host }};

  {{ range $ssl_cert, $cont := groupBy $containers "Env.SSL_CERT" }}
       {{ if $ssl_cert }} 
            listen 443; 
            ssl on;
            ssl_certificate /etc/nginx/ssl/{{ $ssl_cert }};
            ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
            ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";
            ssl_prefer_server_ciphers on;
       {{ end }}
  {{ end }}
  
  {{ range $ssl_key, $cont := groupBy $containers "Env.SSL_KEY" }}
       {{ if $ssl_key }}
            ssl_certificate_key /etc/nginx/ssl/{{$ssl_key}};
       {{end}}
  {{ end }} 
  
  {{ range $ssl_pem, $cont := groupBy $containers "Env.SSL_PEM" }}
       {{ if $ssl_pem}}
            ssl_trusted_certificate /etc/nginx/ssl/{{$ssl_pem}};
       {{end}}
  {{ end }}  

  server_name {{ $host }};
  proxy_buffering off;
  error_log /proc/self/fd/2;
  access_log /proc/self/fd/1;

  location / {
    proxy_pass http://{{ $host }};
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;

    # HTTP 1.1 support
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $proxy_connection;
  }
}
{{ end }}
